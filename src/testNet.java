
import com.sun.awt.AWTUtilities;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author pc
 */
public class testNet extends javax.swing.JFrame {

    /**
     * Creates new form testNet
     */
    private static int cnt;
    public testNet() {
        initComponents();
       
  

        this.setSize(190,100);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

//height of the task bar
Insets scnMax = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
int taskBarSize = scnMax.bottom;
//available size of the screen 
setLocation(screenSize.width - getWidth(), screenSize.height - taskBarSize - getHeight());
NetworkList();
 this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.jpg")));      
        AWTUtilities.setWindowOpacity(this, 0.8f); 
        
    }
  public void getConnect(){
    String networkList=jComboBox1.getSelectedItem().toString();
     String cmd = "netsh wlan connect name="+networkList+"";

        try {

            Process p3;
             p3 = Runtime.getRuntime().exec("cmd /c " + cmd);
             p3.waitFor();
             BufferedReader reader = new BufferedReader(new InputStreamReader(p3.getInputStream()));
             String line = reader.readLine();
             while(line!=null){
                 
                // wlanResults.append(line + "\n");
                 System.out.println(line);
                 line = reader.readLine();
             }
        } catch (IOException ex) {

           // wlanResults.append("Comand error\n" + ex);
            System.out.println("There was an IO exception.");

        } catch (InterruptedException ex) {
            Logger.getLogger(WanTest.class.getName()).log(Level.SEVERE, null, ex);
        }

}
    public void toDisconnect(){
     String cmd = "netsh wlan disconnect";
     
        try {

            Process p3;
             p3 = Runtime.getRuntime().exec("cmd /c " + cmd);
             p3.waitFor();
             BufferedReader reader = new BufferedReader(new InputStreamReader(p3.getInputStream()));
             String line = reader.readLine();
            
             while(line!=null)
             {
                 System.out.println(line);
                 line = reader.readLine();
             }
        } catch (IOException ex) {

           // wlanResults.append("Comand error\n" + ex);
            System.out.println("There was an IO exception.");

        } catch (InterruptedException ex) {
            Logger.getLogger(WanTest.class.getName()).log(Level.SEVERE, null, ex);
        }

}
    private static boolean netIsAvailable() {
    try {
        final URL url = new URL("http://www.google.com");
        final URLConnection conn = url.openConnection();
        conn.connect();
        conn.getInputStream().close();
        return true;
    } catch (MalformedURLException e) {
        throw new RuntimeException(e);
    } catch (IOException e) {
        return false;
    }
}
    
    public static void NetworkList(){
     String cmd = "for /f \"tokens=2*delims=: \" %i in ('netsh wlan show networks^|find \"SSID\"')do @echo\\%j";

        try {

            Process p3;
             p3 = Runtime.getRuntime().exec("cmd /c " + cmd);
             p3.waitFor();
             BufferedReader reader = new BufferedReader(new InputStreamReader(p3.getInputStream()));
             String line = reader.readLine();
             while(line!=null){
                 
                // wlanResults.append(line + ".");
                 jComboBox1.addItem(line);
                 System.out.println(line);
                 line = reader.readLine();
             }
        } catch (IOException ex) {

           // wlanResults.append("Comand error\n" + ex);
            System.out.println("There was an IO exception.");

        } catch (InterruptedException ex) {
            Logger.getLogger(WanTest.class.getName()).log(Level.SEVERE, null, ex);
        }

}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnScan = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WiFi");
        setAlwaysOnTop(true);
        setUndecorated(true);

        btnScan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Refresh.jpg"))); // NOI18N
        btnScan.setToolTipText("Scan for Networks");
        btnScan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScanActionPerformed(evt);
            }
        });

        btnConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Connect.jpg"))); // NOI18N
        btnConnect.setToolTipText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnDisconnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Disconnect.jpg"))); // NOI18N
        btnDisconnect.setToolTipText("Disconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnScan, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnScan)
                .addGap(1, 1, 1)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConnect)
                    .addComponent(btnDisconnect)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnScanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScanActionPerformed
              jComboBox1.removeAllItems();
        NetworkList();
        if (netIsAvailable()) {
            System.err.println("Connected to Internet");
        } else {
            System.err.println("Not Connected");
        }
    }//GEN-LAST:event_btnScanActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
      
          getConnect();
        
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
          if (netIsAvailable()) {
           toDisconnect();
            System.err.println("Disconnected");
        } 
    }//GEN-LAST:event_btnDisconnectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(testNet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(testNet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(testNet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testNet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new testNet().setVisible(true);
                
               //Refresh Internet Connectivity  Check              
                 ActionListener actListner = new ActionListener() {

@Override
 
public void actionPerformed(ActionEvent event) {
  
    cnt += 1;
    System.out.println("Counter = "+cnt);
      jComboBox1.removeAllItems();
     NetworkList();
   
}

 
  };
 
  Timer timer = new Timer(3000, actListner);
 
  timer.start();
               //**********************************
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnScan;
    public static javax.swing.JComboBox<String> jComboBox1;
    // End of variables declaration//GEN-END:variables
}
